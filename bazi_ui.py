import logging
logging.basicConfig(level=logging.DEBUG)
import streamlit as st
import pandas as pd
from datetime import datetime
import plotly.graph_objects as go

from bazi_calculator import BaziCalculator
from bazi_analyzer import BaziAnalyzer

class BaziUI:
    def __init__(self):
        st.set_page_config(
            page_title="Ph√¢n T√≠ch B√°t T·ª± (Ho√†n Thi·ªán)",
            page_icon="üé¥",
            layout="wide"
        )
        st.markdown("""
        <style>
        .card {
            padding: 20px;
            border-radius: 10px;
            margin: 10px 0;
            background-color: #f8f9fa;
        }
        .big-font { font-size: 24px !important; font-weight: bold; }
        .medium-font { font-size:18px !important; }
        </style>
        """, unsafe_allow_html=True)

    def create_input_form(self):
        # ƒê√£ ƒë·ªïi ph·∫ßn title:
        st.title("Nh·∫≠p th√¥ng tin")
        with st.form("bazi_input"):
            col1, col2= st.columns(2)
            with col1:
                name= st.text_input("H·ªç v√† T√™n", "Nguy·ªÖn VƒÉn A")
                gender= st.selectbox("Gi·ªõi T√≠nh", ["Nam","N·ªØ"])
            with col2:
                bdate= st.date_input("Ng√†y Sinh (DL)", datetime(1983,11,17))
                btime= st.time_input("Gi·ªù Sinh", datetime(1983,11,17,11,30).time())
            submitted= st.form_submit_button("Ph√¢n T√≠ch")
        return submitted, name, gender, bdate, btime

    def display_basic_info(self, bazi_data):
        info= bazi_data["thong_tin"]
        st.header("üìå Th√¥ng Tin C∆° B·∫£n")
        col1,col2= st.columns(2)
        with col1:
            st.markdown(f"- **H·ªç T√™n**: {info['h·ªç_t√™n']}")
            st.markdown(f"- **Gi·ªõi T√≠nh**: {info['gi·ªõi_t√≠nh']}")
            st.markdown(f"- **Ng√†y Sinh (DL)**: {info['ng√†y_sinh_dl']}")
            st.markdown(f"- **Gi·ªù Sinh**: {info['gi·ªù_sinh']}")
        with col2:
            st.markdown(f"- **Ng√†y Sinh (AL)**: {info['ng√†y_sinh_al']}")
            st.markdown(f"- **M·ªánh C·ª•c**: {bazi_data['menh_cuc']}")
            st.markdown(f"- **C·ª•c Qu·∫ª Gi·ªù**: {bazi_data['cuc_que']}")

    def display_tu_tru(self, bazi_data):
        st.header("üé¥ T·ª© Tr·ª•")
        tu_tru= bazi_data["tu_tru"]
        color_map= {
            "Kim":"#FFD700","M·ªôc":"#4CAF50",
            "Th·ªßy":"#2196F3","H·ªèa":"#F44336",
            "Th·ªï":"#FF9800"
        }
        order=["nƒÉm","th√°ng","ng√†y","gi·ªù"]
        name=["Tr·ª• NƒÉm","Tr·ª• Th√°ng","Tr·ª• Ng√†y","Tr·ª• Gi·ªù"]
        cols= st.columns(4)
        for i,k in enumerate(order):
            val= tu_tru[k]
            can= val["can_chi"]["can"]
            chi= val["can_chi"]["chi"]
            hanh= val["ngu_hanh"]
            nap_am= val.get("n·∫°p_am","")
            tang_can= val.get("t√†ng_can",[])
            than_sat= ", ".join(val.get("th·∫ßn_s√°t",[]))
            c= color_map.get(hanh,"#888")
            with cols[i]:
                st.markdown(f"""
                <div style="background-color:{c}; padding:20px; border-radius:10px; text-align:center; color:white">
                   <h3>{name[i]}</h3>
                   <p style="font-size:24px">{can} {chi}</p>
                   <p>Ng≈© H√†nh: {hanh}</p>
                   <p>N·∫°p √Çm: {nap_am}</p>
                   <p>T√†ng Can: {', '.join(tang_can)}</p>
                   <p>Th·∫ßn S√°t: {than_sat}</p>
                </div>
                """, unsafe_allow_html=True)

    def display_ngu_hanh_analysis(self, nh_data):
        st.header("üåü Ph√¢n T√≠ch Ng≈© H√†nh")
        fig= go.Figure()
        col_map= {
            "Kim":"#FFD700","M·ªôc":"#4CAF50",
            "Th·ªßy":"#2196F3","H·ªèa":"#F44336",
            "Th·ªï":"#FF9800"
        }
        for e, cnt in nh_data["th·ªëng_k√™"].items():
            fig.add_trace(go.Bar(name=e, x=[e], y=[cnt], marker_color=col_map.get(e,"#888")))
        fig.update_layout(title="Ph√¢n B·ªë Ng≈© H√†nh", showlegend=False, height=400)
        st.plotly_chart(fig, use_container_width=True)

        st.write(f"**Ng≈© H√†nh V∆∞·ª£ng**: {nh_data['v∆∞·ª£ng']}")
        st.write(f"**Ng≈© H√†nh Suy**: {nh_data['suy']}")

    def display_detailed_analysis(self, analysis):
        st.header("üìä Ph√¢n T√≠ch Chi Ti·∫øt")
        tab1, tab2, tab3, tab4= st.tabs(["T·ªïng Quan","T·ª© Tr·ª• Chi Ti·∫øt","V·∫≠n H·∫°n","T∆∞ V·∫•n"])

        with tab1:
            self._display_overview(analysis["t·ªïng_quan"])
        with tab2:
            self._display_tu_tru_details(analysis["chi_ti·∫øt_t·ª©_tr·ª•"])
        with tab3:
            self._display_van_han(analysis["v·∫≠n_h·∫°n"])
        with tab4:
            self._display_advice(analysis)

    def _display_overview(self, overview):
        st.subheader("M·ªánh C·ª•c & Ng≈© H√†nh")
        mc= overview["m·ªánh_c·ª•c"]
        # In "b·∫£n_ch·∫•t", "l∆∞u_√Ω", "ph√°t_tri·ªÉn" d∆∞·ªõi d·∫°ng bullet
        st.markdown("**B·∫£n Ch·∫•t:**")
        st.markdown("<ul>", unsafe_allow_html=True)
        for item in mc["b·∫£n_ch·∫•t"]:
            st.markdown(f"<li>{item}</li>", unsafe_allow_html=True)
        st.markdown("</ul>", unsafe_allow_html=True)

        st.markdown("**L∆∞u √ù:**")
        st.markdown("<ul>", unsafe_allow_html=True)
        for item in mc["l∆∞u_√Ω"]:
            st.markdown(f"<li>{item}</li>", unsafe_allow_html=True)
        st.markdown("</ul>", unsafe_allow_html=True)

        st.markdown("**Ph√°t Tri·ªÉn:**")
        st.markdown("<ul>", unsafe_allow_html=True)
        for item in mc["ph√°t_tri·ªÉn"]:
            st.markdown(f"<li>{item}</li>", unsafe_allow_html=True)
        st.markdown("</ul>", unsafe_allow_html=True)

        nh= overview["ng≈©_h√†nh"]
        st.markdown(f"**Ng≈© H√†nh V∆∞·ª£ng**: {nh['v∆∞·ª£ng']['h√†nh']}")
        st.markdown(f"**Ng≈© H√†nh Suy**: {nh['suy']['h√†nh']}")

    def _display_tu_tru_details(self, details):
        for tru, val in details.items():
            st.markdown(f"### Tr·ª• {tru.capitalize()}")
            st.write(f"**√ù Nghƒ©a**: {val['√Ω_nghƒ©a']['chung']}")
            st.write("**Chi Ti·∫øt**:")
            st.markdown("<ul>", unsafe_allow_html=True)
            for c in val["√Ω_nghƒ©a"]["chi_ti·∫øt"]:
                st.markdown(f"<li>{c}</li>", unsafe_allow_html=True)
            st.markdown("</ul>", unsafe_allow_html=True)

            st.write("**T√≠nh Ch·∫•t (h√†nh):**")
            st.markdown("<ul>", unsafe_allow_html=True)
            for t in val["t√≠nh_ch·∫•t"]:
                st.markdown(f"<li>{t}</li>", unsafe_allow_html=True)
            st.markdown("</ul>", unsafe_allow_html=True)

            st.write("**L∆∞u √ù (h√†nh):**")
            st.markdown("<ul>", unsafe_allow_html=True)
            for t in val["l∆∞u_√Ω"]:
                st.markdown(f"<li>{t}</li>", unsafe_allow_html=True)
            st.markdown("</ul>", unsafe_allow_html=True)

            st.write(f"**N·∫°p √Çm**: {val['n·∫°p_am']}")
            st.write(f"**T√†ng Can**: {', '.join(val['t√†ng_can'])}")
            st.write(f"**Th·∫ßn S√°t**: {', '.join(val['th·∫ßn_s√°t'])}")
            st.markdown("---")

    def _display_van_han(self, van_han):
        st.subheader("V·∫≠n H·∫°n Hi·ªán T·∫°i")
        hv= van_han["hi·ªán_t·∫°i"]
        st.write(f"**Giai ƒêo·∫°n**: {hv['giai_ƒëo·∫°n']}")
        st.write(f"**ƒê·∫∑c ƒêi·ªÉm**: {hv['ƒë·∫∑c_ƒëi·ªÉm']}")

        st.write("**L·ªùi Khuy√™n**:")
        st.markdown("<ul>", unsafe_allow_html=True)
        for adv in hv["l·ªùi_khuy√™n"]:
            st.markdown(f"<li>{adv}</li>", unsafe_allow_html=True)
        st.markdown("</ul>", unsafe_allow_html=True)

        st.subheader("B·ªën Giai ƒêo·∫°n Cu·ªôc ƒê·ªùi")
        b4= van_han["b·ªën_giai_ƒëo·∫°n"]
        for stage, info in b4.items():
            st.markdown(f"**{stage}**: {info['ƒë·∫∑c_ƒëi·ªÉm']}")
            st.markdown("L·ªùi khuy√™n:")
            st.markdown("<ul>", unsafe_allow_html=True)
            for tip in info["l·ªùi_khuy√™n"]:
                st.markdown(f"<li>{tip}</li>", unsafe_allow_html=True)
            st.markdown("</ul>", unsafe_allow_html=True)

        st.subheader("Ph√¢n T√≠ch Chi Ti·∫øt")
        detail= van_han.get("ph√¢n_t√≠ch_chi_ti·∫øt",{})
        st.write("**C√¥ng Danh**:", detail.get("c√¥ng_danh",""))
        st.write("**T√†i V·∫≠n**:", detail.get("t√†i_v·∫≠n",""))
        st.write("**Gia ƒê√¨nh**:", detail.get("gia_ƒë√¨nh",""))
        st.write("**S·ª©c Kh·ªèe**:", detail.get("s·ª©c_kh·ªèe",""))
        st.write("**T√¨nh C·∫£m**:", detail.get("t√¨nh_c·∫£m",""))
        st.write("**B·∫°n B√®**:", detail.get("b·∫°n_b√®",""))
        st.write("**ƒê·ªìng Nghi·ªáp**:", detail.get("ƒë·ªìng_nghi·ªáp",""))

    def _display_advice(self,analysis):
        st.subheader("Quan H·ªá")
        qh= analysis["quan_h·ªá"]
        st.write("**T∆∞∆°ng Sinh**:")
        st.write(f"- Sinh: {qh['t∆∞∆°ng_sinh']['sinh']}")
        st.write(f"- ƒê∆∞·ª£c Sinh: {qh['t∆∞∆°ng_sinh']['ƒë∆∞·ª£c_sinh']}")

        st.write("**T∆∞∆°ng Kh·∫Øc**:")
        st.write(f"- Kh·∫Øc: {qh['t∆∞∆°ng_kh·∫Øc']['kh·∫Øc']}")
        st.write(f"- B·ªã Kh·∫Øc: {qh['t∆∞∆°ng_kh·∫Øc']['b·ªã_kh·∫Øc']}")

        st.subheader("S·ª± Nghi·ªáp")
        sn= analysis["s·ª±_nghi·ªáp"]
        st.write("**Ng√†nh Ngh·ªÅ Ph√π H·ª£p**:")
        st.markdown("<ul>", unsafe_allow_html=True)
        for job in sn["ng√†nh_ngh·ªÅ_ph√π_h·ª£p"]:
            st.markdown(f"<li>{job}</li>", unsafe_allow_html=True)
        st.markdown("</ul>", unsafe_allow_html=True)
        st.write("**L·ªùi Khuy√™n**:", sn["l·ªùi_khuy√™n"])

        st.subheader("S·ª©c Kh·ªèe")
        sk= analysis["s·ª©c_kh·ªèe"]
        st.write("**C∆° B·∫£n**:")
        st.markdown(f"- C∆° quan: {', '.join(sk['c∆°_b·∫£n']['c∆°_quan'])}")
        st.markdown(f"- N√™n Ch√∫ √ù: {', '.join(sk['c∆°_b·∫£n']['n√™n_ch√∫_√Ω'])}")

        st.write("**Khuy·∫øn Ngh·ªã**:")
        st.markdown("**Dinh D∆∞·ª°ng:**")
        st.markdown("<ul>", unsafe_allow_html=True)
        for dd in sk["khuy·∫øn_ngh·ªã"]["dinh_d∆∞·ª°ng"]:
            st.markdown(f"<li>{dd}</li>", unsafe_allow_html=True)
        st.markdown("</ul>", unsafe_allow_html=True)

        st.markdown("**V·∫≠n ƒê·ªông:**")
        st.markdown("<ul>", unsafe_allow_html=True)
        for vd in sk["khuy·∫øn_ngh·ªã"]["v·∫≠n_ƒë·ªông"]:
            st.markdown(f"<li>{vd}</li>", unsafe_allow_html=True)
        st.markdown("</ul>", unsafe_allow_html=True)

        st.markdown("**Tinh Th·∫ßn:**")
        st.markdown("<ul>", unsafe_allow_html=True)
        for tt in sk["khuy·∫øn_ngh·ªã"]["tinh_th·∫ßn"]:
            st.markdown(f"<li>{tt}</li>", unsafe_allow_html=True)
        st.markdown("</ul>", unsafe_allow_html=True)

def main():
    ui= BaziUI()
    calc= BaziCalculator()
    ana= BaziAnalyzer()

    submitted, name, gender, bdate, btime= ui.create_input_form()
    if submitted and name and bdate and btime:
        try:
            bazi_data= calc.calculate_bazi(bdate,btime,gender,name)
            analysis= ana.get_full_analysis(bazi_data)

            ui.display_basic_info(bazi_data)
            ui.display_tu_tru(bazi_data)
            ui.display_ngu_hanh_analysis(bazi_data["ngu_hanh"])
            ui.display_detailed_analysis(analysis)

        except Exception as e:
            st.error(f"L·ªói: {str(e)}")

if __name__=="__main__":
    main()
